# -*- coding: utf-8 -*-
"""retrieved context (Pinecone).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AALtK_Cwsdnig1P9Za8lFAoNydQBi87L
"""

!pip install sentence-transformers==2.2.2 langchain pypdf pinecone[grpc] langchain-pinecone langchain_community langchain_openai langchain_experimental

from langchain.document_loaders import PyPDFLoader, DirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

def load_pdf_file(file_path):
    loader = PyPDFLoader(file_path)
    documents = loader.load()
    return documents

data = "/content/Medical_book.pdf"
extracted_data = load_pdf_file(data)

def text_split(extracted_data):
    text_splitter=RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=20)
    text_chunks=text_splitter.split_documents(extracted_data)
    return text_chunks

text_chunks=text_split(extracted_data)
print("Length of Text Chunks", len(text_chunks))

Pinecoin_API_KEY= userdata.get('Pinecone_API_Key')

def download_hugging_face_embeddings():
    embeddings=HuggingFaceEmbeddings(model_name='sentence-transformers/all-MiniLM-L6-v2')
    return embeddings

embeddings = download_hugging_face_embeddings()

query_result = embeddings.embed_query("Hello world")
print("Length", len(query_result))

query_result = embeddings.embed_query("Hello world")
print("Length", len(query_result))

from pinecone.grpc import PineconeGRPC as Pinecone
from pinecone import ServerlessSpec
import os

pc = Pinecone(api_key= Pinecoin_API_KEY)

index_name = "  "


pc.create_index(
    name=index_name,
    dimension=384,
    metric="cosine",
    spec=ServerlessSpec(
        cloud="aws",
        region="us-east-1"
    )
)

from langchain.vectorstores import Pinecone

# Initialize Pinecone vector store
docsearch = Pinecone.from_documents(
    documents=text_chunks,
    embedding=embeddings,
    index_name=index_name,
)

from langchain.vectorstores import Pinecone
# Embed each chunk and upsert the embeddings into your Pinecone index.
docsearch = Pinecone.from_existing_index(
    index_name=index_name,
    embedding=embeddings
)

retriever = docsearch.as_retriever(search_type="similarity", search_kwargs={"k":3})

retrieved_docs = retriever.invoke("What is Acne?")